#version: '3.8' # Puedes descomentar esta línea
services:
  # Servicio de Nginx (Proxy Inverso + Frontend)
  proxy:
    build:
      context: .
      dockerfile: proxy/Dockerfile
    ports:
      - "80:80"  # Accesible desde el host en http://localhost
    depends_on:
      - user-auth
      - bus-reservation
      - payment-gateway
      - route-scheduler
    networks:
      - app-network
    # Montar el directorio del frontend para desarrollo local (opcional)
    # volumes:
    #   - ./frontend:/usr/share/nginx/html


  user-auth:
    build: ./microservices/user-auth
    ports:
      - "5001:5001"
    networks:
      - app-network
    volumes:
      # Montar el volumen 'user_auth_data' al directorio /app/data dentro del contenedor
      # Donde la aplicación Flask guardará el archivo users.db
      - user_auth_data:/app/data
    # Reiniciar automáticamente si falla
    restart: unless-stopped


  bus-reservation:
    build: ./microservices/bus-reservation
    ports:
      - "5002:5002"
    networks:
      - app-network
    volumes: # <-- Añadir sección volumes aquí
      # Montar el volumen 'bus_reservation_data' al directorio /app/data dentro del contenedor
      # Donde la aplicación Flask guardará el archivo reservations.db
      - bus_reservation_data:/app/data # <-- Montar el volumen
    # Reiniciar automáticamente si falla
    restart: unless-stopped # <-- Recomendado para que el servicio se recupere


  payment-gateway:
    build: ./microservices/payment-gateway
    ports:
      - "5003:5003"
    networks:
      - app-network
    # No necesita persistencia a menos que almacene logs o estado interno


  route-scheduler:
    build: ./microservices/route-scheduler
    ports:
      - "5004:5004"
    networks:
      - app-network
    # No necesita persistencia a menos que guarde rutas o horarios de forma dinámica (actualmente simulados)


  prometheus:
    build: ./prometheus
    ports:
      - "9090:9090"
    networks:
      - app-network


  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true # Habilita el acceso anónimo (para pruebas)
    networks:
      - app-network
    # Montar configuración de Grafana (opcional, para persistir dashboards, etc.)
    # volumes:
    #   - grafana_data:/var/lib/grafana


# --- Definición de Volúmenes ---
volumes:
  user_auth_data: # Define el volumen con nombre para user-auth
  bus_reservation_data: # <-- Define el nuevo volumen para bus-reservation
  # grafana_data: # Opcional: define volumen para Grafana


networks:
  app-network:
    driver: bridge
